uniform sampler2D texture;
uniform int check_use;

/*float luminance(vec3 val)
{
    return 0.299f*val.x + 0.587f*val.y + 0.114f*val.z;
}*/

float luminance(vec3 val)
{
    return 0.2126 * val.x + 0.7152 * val.y + 0.0722 * val.z;
}

void main()
{
    vec4 in_col4 = gl_Color;
    vec3 in_col = in_col4.xyz;
    vec3 tex_col = texture2D(texture, gl_TexCoord[0].xy);

    if(check_use == 0)
    {
        //gl_FragColor = 0;
        gl_FragColor = vec4(in_col * tex_col, in_col4.a);
        return;
    }

    //gl_FragColor = vec4(1,0,0, 1);
    //return;

    ///ok so
    ///what I want to do is...
    ///the further the text is away from white, the more i want to dim subpixels
    ///so if the text is red, we want to dim subpixels by

    ///multiply texture colour by input colour
    ///work out difference in brightness
    ///scale it so that the difference in brightness is the same as it should be

    vec3 multiplied_col = tex_col * in_col;

    float texture_luminance = luminance(tex_col);
    float colour_lum = luminance(in_col);

    float multiplied_luminance = luminance(multiplied_col);

    float luminance_we_should_have_gotten = texture_luminance * colour_lum;

    ///ok concrete number this
    ///white col is 1,1,1
    ///we're colouring red, gives us 1,0,0

    ///our texture has a white pixel 1,1,1
    ///gets coloured red = 1,0,0

    ///in luminance reduction = lum(1,1,1) / lum(in_col) = like say 3
    ///texture luminance reduction = lum(tex_old) / lum(tex_old * in_col) = also 3

    ///rgb case
    ///texture has a red pixel 1,0,0
    ///gets coloured red = 1,0,0
    ///thats lum(1,0,0) / lum(1,0,0) = 1

    ///so it needs to be reduced further by texture luminance_reduction / in_luminance_reduction?

    if(luminance(tex_col) < 0.0001)
        return;

    float luminance_fraction_reduction = luminance(in_col);

    float texture_luminance_fraction_reduction = luminance(tex_col * in_col) / luminance(tex_col);

    int set_0 = 0;

    if(texture_luminance_fraction_reduction < 0.0001)
    {
        texture_luminance_fraction_reduction = 1;
        set_0 = 1;
    }

    float multiply_fraction = luminance_fraction_reduction / texture_luminance_fraction_reduction;

    vec3 fin = multiplied_col * multiply_fraction;

    if(set_0)
        fin = vec3(0,0,0);

    gl_FragColor = vec4(fin, 1);
}
